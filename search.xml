<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LuaJIT的变量实现</title>
      <link href="/2022/07/09/luajit-value/"/>
      <url>/2022/07/09/luajit-value/</url>
      
        <content type="html"><![CDATA[<p>Lua是动态类型的编程语言，变量的值可以是数值、字符串、table等所有支持的数据类型。在Lua虚拟机中每个变量都是用一个TValue结构体表示。LuaJIT出于效率的考虑重新组织了TValue结构体。</p><h1 id="lua-5-1中的TValue结构"><a href="#lua-5-1中的TValue结构" class="headerlink" title="lua-5.1中的TValue结构"></a>lua-5.1中的TValue结构</h1><p>lua-5.1中TValue的结构定义在lobject.h中，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">typedef union &#123;<br>  GCObject *gc;<br>  void *p;<br>  lua_Number n;<br>  int b;<br>&#125; Value;<br><br>#define TValuefields Value value;<br>int tt;<br><br>typedef struct lua_TValue &#123;<br>  TValuefields;<br>&#125; TValue;<br></code></pre></td></tr></table></figure><p>TValue结构体包含了两个部分，int类型的成员tt表示类型，Value成员是一个union结构，依据类型，有不同的含义。</p><ul><li>当类型位nil时，nil本身不再需要其他标识，Value成员没有意义</li><li>当类型为boolean时，成员b为0或1表示false或true</li><li>当类型为number时，成员n表示，为double类型</li><li>当类型为lightuserdata时，成员p，表示指针</li><li>当类型为function&#x2F;string&#x2F;userdata&#x2F;table&#x2F;thread等需要GC管理的类型时，成员gc表示相应GC对象的指针。<br>这样一个变量只要对应一个TValue结构便可以表示Lua支持的所有类型。</li></ul><p>lua中所有的数值都是用double类型的浮点数来表示，需要占用64位的空间。再加上额外的int类型成员tt来表示类型，一个TValue结构至少需要64+32&#x3D;96位的空间，如果按照8字节对其的话就需要占用128位的空间。而LuaJIT中通过Nan-boxing技术，重组了TValue，只需要占用64位的空间。</p><p>Nan-boxing<br>ieee754是使用最广泛的浮点数编码格式，它将浮点数编码成三个部分，符号、指数和尾数。如下所示</p><p><img src="/../images/2022-07-09-17-19-13.png"></p><p>双精度类型即double类型，最高位为符号位，后面的11位表示指数，最低52位为尾数。三个组合表示浮点数的值。</p><p>浮点数有些特殊的值，其中之一就是NaN(Not a Number)。有些浮点数运算如0&#x2F;0得到的结果就是NaN。IEEE 754标准中，如果指数部分全为1，且尾数部分不全为0时，表示值为 NaN。double类型的浮点数尾数部分有52位，NaN只要求这52位不全为0即可，只要其中一个是1剩余的51位就可以编码表示其他的含义。</p><p>实际使用的浮点数运算单元也只会产生一种NaN表示，即0xfff8_0000_0000_0000，只用了最高的13位，剩余的的51位便可以表示Lua中其他的字符串、table等。</p><h1 id="内存地址的处理"><a href="#内存地址的处理" class="headerlink" title="内存地址的处理"></a>内存地址的处理</h1><p>TValue结构中有些成员是指针，64位系统中，指针的长度为64位，那么如何在剩下的51位中表示指针类型呢？为此LuaJIT对不同类型有两种处理方式。</p><h2 id="1-用47位地址表示指针"><a href="#1-用47位地址表示指针" class="headerlink" title="1. 用47位地址表示指针"></a>1. 用47位地址表示指针</h2><p>对于64位系统，理论上每个进程都有64位的线性地址空间，共有16,777,216TB。然而可预见的将来，操作系统和应用并不需要这么多的内存，支持如此大的地址会增加地址转换的复杂性和成本， 因此现在的实现并不允许使用全部的地址空间。</p><p>以率先实现64位架构的AMD为例，在进行内存地址转换时，只会使用地址的低48位，并且要求从第48到63的这16位需要与第47位相同。即地址必须在0到00007FFF’FFFFFFFF 和 FFFF8000’00000000 到 FFFFFFFF’FFFFFFFF这两个范围内，共有256TB的虚拟地址空间。</p><p>操作系统本身也会对内存使用进行限制，以Linux为例，将高128TB的空间划归内核使用，这样用户态进程只能低128TB的地址，如下图所示。地址的高17位皆为0，因此使用47位即可表示所有能够使用的地址。</p><p><img src="/../images/2022-07-09-17-22-39.png"></p><h2 id="2-只使用最低的2G的地址空间"><a href="#2-只使用最低的2G的地址空间" class="headerlink" title="2. 只使用最低的2G的地址空间"></a>2. 只使用最低的2G的地址空间</h2><p>以Linux为例，LuaJIT默认通过mmap系统调用来分配内存，对于x86_64平台的64位程序，mmap有一个MAP_32BIT标记选项，表示只分配虚拟地址空间的低2GB的空间，这样分配的内存地址，高33位皆为0, 相应的指针只需要32位的空间即可。</p><h2 id="3-LuaJIT的处理与GC64模式"><a href="#3-LuaJIT的处理与GC64模式" class="headerlink" title="3. LuaJIT的处理与GC64模式"></a>3. LuaJIT的处理与GC64模式</h2><p>对于lightuserdata类型的值，LuaJIT用47位表示，对于GC类型的对象，都是通过mmap加MAP_32BIT标记分配的，用32位表示，这限制了LuaJIT只能使用不超过2GB的内存。为了摆脱这个限制，LuaJIT增加了GC64模式，开启后，所有的指针类型，包括lightuserdata都使用47位指针来表示。</p><p>LuaJIT的TValue结构<br>默认模式下TValue布局<br>LuaJIT中的TValue布局如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C">**<br>** Format <span class="hljs-keyword">for</span> <span class="hljs-number">32</span> bit GC <span class="hljs-title function_">references</span> <span class="hljs-params">(!LJ_GC64)</span>:<br>**<br>** Internal tags overlap the MSW of a number <span class="hljs-title function_">object</span> <span class="hljs-params">(must be a <span class="hljs-type">double</span>)</span>.<br>** Interpreted as a <span class="hljs-type">double</span> these are special NaNs. The FPU only generates<br>** one type of <span class="hljs-title function_">NaN</span> <span class="hljs-params">(<span class="hljs-number">0xfff8</span>_0000_0000_0000)</span>. So MSWs &gt; 0xfff80000 are available<br>** <span class="hljs-keyword">for</span> use as internal tags. Small negative numbers are used to shorten the<br>** encoding of type <span class="hljs-title function_">comparisons</span> <span class="hljs-params">(reg/mem against sign-ext. <span class="hljs-number">8</span> bit immediate)</span>.<br>**<br>**                  ---MSW---.---LSW---<br>** primitive types |  itype  |         |<br>** lightuserdata   |  itype  |  <span class="hljs-type">void</span> * |  <span class="hljs-params">(<span class="hljs-number">32</span> bit platforms)</span><br>** lightuserdata   |ffff|    <span class="hljs-type">void</span> *    |  <span class="hljs-params">(<span class="hljs-number">64</span> bit platforms, <span class="hljs-number">47</span> bit pointers)</span><br>** GC objects      |  itype  |  GCRef  |<br>** <span class="hljs-title function_">int</span> <span class="hljs-params">(LJ_DUALNUM)</span>|  itype  |   <span class="hljs-type">int</span>   |<br>** number           -------<span class="hljs-type">double</span>------<br></code></pre></td></tr></table></figure><p>可以通过下面的步骤判断值的类型</p><p>如果最高的16位（即48到63位）不全为1，表示这是一个double类型的浮点数，<br>最高的16位全为1，如果第47位为0时表示一个lightuserdata类型，<br>其余情况下，高32位表示类型，低32位表示实际值。</p><h1 id="GC64模式下TValue布局"><a href="#GC64模式下TValue布局" class="headerlink" title="GC64模式下TValue布局"></a>GC64模式下TValue布局</h1><p>GC64模式开启后如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">**<br>** The upper <span class="hljs-number">13</span> bits must be <span class="hljs-number">1</span> (<span class="hljs-number">0xfff8</span>...) <span class="hljs-keyword">for</span> a special NaN. The next<br>** <span class="hljs-number">4</span> bits hold the internal tag. The lowest <span class="hljs-number">47</span> bits either hold a pointer,<br>** a zero-extended <span class="hljs-number">32</span> bit integer or all bits <span class="hljs-built_in">set</span> to <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> primitive types.<br>**<br>**                     ------MSW------.------LSW------<br>** primitive types    |<span class="hljs-number">1.</span><span class="hljs-number">.1</span>|itype|<span class="hljs-number">1.</span>................<span class="hljs-number">.1</span>|<br>** GC objects/lightud |<span class="hljs-number">1.</span><span class="hljs-number">.1</span>|itype|-------GCRef--------|<br>** <span class="hljs-type">int</span> (LJ_DUALNUM)   |<span class="hljs-number">1.</span><span class="hljs-number">.1</span>|itype|<span class="hljs-number">0.</span><span class="hljs-number">.0</span>|-----<span class="hljs-type">int</span>-------|<br>** number              ------------<span class="hljs-type">double</span>-------------<br></code></pre></td></tr></table></figure><p>这里比较特殊的是最高的13位全位1表double类型，itype表示类型，占4位，指针占用47位，总共仍是64位。</p><p>TValue结构<br>LuaJIT的TValue定义在lj_obj.h中，如下面所示，因为Nan-boxing的缘故，这里的TValue结构并没有直接反映实际的内存布局。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/* Tagged value. */<br>typedef LJ_ALIGN(8) union TValue &#123;<br>  uint64_t u64;  /* 64 bit pattern overlaps number. */<br>  lua_Number n;  /* Number object overlaps split tag/value object. */<br>#if LJ_GC64<br>  GCRef gcr;  /* GCobj reference with tag. */<br>  int64_t it64;<br>  struct &#123;<br>    LJ_ENDIAN_LOHI(<br>      int32_t i; /* Integer value. */<br>    , uint32_t it; /* Internal object tag. Must overlap MSW of number. */<br>    )<br>  &#125;;<br>#else<br>  struct &#123;<br>    LJ_ENDIAN_LOHI(<br>      union &#123;<br>trueGCRef gcr; /* GCobj reference (if any). */<br>trueint32_t i; /* Integer value. */<br>      &#125;;<br>    , uint32_t it; /* Internal object tag. Must overlap MSW of number. */<br>    )<br>  &#125;;<br>#endif<br><br> ..........<br><br>&#125; TValue;<br></code></pre></td></tr></table></figure><h1 id="类型的定义"><a href="#类型的定义" class="headerlink" title="类型的定义"></a>类型的定义</h1><p>所有的数据类型定义中最高的几位均为1，方便与浮点数的区分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TNIL   (~0u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TFALSE  (~1u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TTRUE  (~2u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TLIGHTUD  (~3u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TSTR   (~4u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TUPVAL  (~5u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TTHREAD  (~6u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TPROTO  (~7u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TFUNC  (~8u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TTRACE  (~9u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TCDATA  (~10u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TTAB   (~11u)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TUDATA  (~12u)</span><br><span class="hljs-comment">/* This is just the canonical number type used in some places. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TNUMX  (~13u)</span><br><br><span class="hljs-comment">/* Integers have itype == LJ_TISNUM doubles have itype &lt; LJ_TISNUM */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> LJ_64 &amp;&amp; !LJ_GC64</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TISNUM  0xfffeffffu</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LJ_TISNUM  LJ_TNUMX</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>判断类型的宏定义<br>LuaJIT定义了一系列宏用来判断值的类型。<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> LJ_GC64</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> itype(o) ((uint32_t)((o)-&gt;it64 &gt;&gt; 47))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisnil(o) ((o)-&gt;it64 == -1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> itype(o) ((o)-&gt;it)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisnil(o) (itype(o) == LJ_TNIL)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisfalse(o) (itype(o) == LJ_TFALSE)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvistrue(o) (itype(o) == LJ_TTRUE)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisbool(o) (tvisfalse(o) || tvistrue(o))</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> LJ_64 &amp;&amp; !LJ_GC64</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvislightud(o) (((int32_t)itype(o) &gt;&gt; 15) == -2)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvislightud(o) (itype(o) == LJ_TLIGHTUD)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisstr(o) (itype(o) == LJ_TSTR)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisfunc(o) (itype(o) == LJ_TFUNC)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisthread(o) (itype(o) == LJ_TTHREAD)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisproto(o) (itype(o) == LJ_TPROTO)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tviscdata(o) (itype(o) == LJ_TCDATA)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvistab(o) (itype(o) == LJ_TTAB)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisudata(o) (itype(o) == LJ_TUDATA)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisnumber(o) (itype(o) &lt;= LJ_TISNUM)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisint(o) (LJ_DUALNUM &amp;&amp; itype(o) == LJ_TISNUM)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> tvisnum(o) (itype(o) &lt; LJ_TISNUM)</span><br>LJ_DUALNUM<br></code></pre></td></tr></table></figure><p>Lua中数值都是double类型的浮点数，而实际使用时经常会用到整数，而位操作等都需要将double类型转换成整数进行。为此LuaJIT提供了LJ_DUALNUM的选项，一些数值可以直接通过int类型存储，方便使用，相当于为Lua增加了整数这个数据类型。</p><p>LJ_DUALNUM的定义可以参考lj_arch.h，不过对常用的x86_64架构，默认并没有启用LJ_DUALNUM。</p><h1 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h1><p><a href="https://qlee.in/luajitde-bian-liang-shi-xian-tvalue/?tdsourcetag=s_pcqq_aiomsg">https://qlee.in/luajitde-bian-liang-shi-xian-tvalue/?tdsourcetag=s_pcqq_aiomsg</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>IEEE Standard for Floating-Point Arithmetic (IEEE 754)</li><li>X86_64 Virtual_address_space_details</li></ul>]]></content>
      
      
      <categories>
          
          <category> 汇编逆向 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Unity 符号表上传</title>
      <link href="/2019/09/27/bugly-symbol/"/>
      <url>/2019/09/27/bugly-symbol/</url>
      
        <content type="html"><![CDATA[<h2 id="Why-do-it"><a href="#Why-do-it" class="headerlink" title="Why do it"></a>Why do it</h2><p>最近游戏内测，发现不少崩溃的堆栈发生在libunity.so之中，而大部分仅仅给一个代码执行到的PC地址，查起来代码比较蛋疼。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-meta">#00 pc 00a6ac38 /data/app/.../libunity.so</span><br><span class="hljs-meta">#01 pc 00a6c128 /data/app/.../x86/libunity.so</span><br><span class="hljs-meta">#02 pc 003f1bf6 /data/app/.../x86/libunity.so </span><br><span class="hljs-meta">#03 pc 003f0b4a /data/app/.../x86/libunity.so </span><br><span class="hljs-meta">#04 pc 0039ff68 /data/app/.../x86/libunity.so </span><br><span class="hljs-meta">#05 pc 00396e77 /data/app/.../x86/libunity.so </span><br><span class="hljs-meta">#06 pc 00398ce0 /data/app/.../x86/libunity.so </span><br><span class="hljs-meta">#07 pc 00398149 /data/app/.../x86/libunity.so </span><br><span class="hljs-meta">#08 pc 003980a2 /data/app/.../x86/libunity.so </span><br><span class="hljs-meta">#09 pc 004f2ca3 /data/app/.../x86/libunity.so </span><br></code></pre></td></tr></table></figure><span id="more"></span><p>这种一般没有符号表，不过我们可以使用addr2line这个经典的binutils工具将PC地址转换为函数名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./i686-linux-android-addr2line.exe -C -i -f -e libunity.sym.so 00a6ac38<br></code></pre></td></tr></table></figure><p>输出结果如下:</br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">mecanim::statemachine::EvaluateState(mecanim::ValueArrayConstant <span class="hljs-type">const</span>&amp;, mecanim::statemachine::StateConstant <span class="hljs-type">const</span>&amp;, mecanim::statemachine::StateMachineInput <span class="hljs-type">const</span>&amp;, mecanim::statemachine::StateMachineOutput&amp;, mecanim::statemachine::StateMachineMemory&amp;, mecanim::statemachine::StateOutput&amp;, mecanim::statemachine::StateWorkspace&amp;, <span class="hljs-type">bool</span>, <span class="hljs-type">bool</span>)<br></code></pre></td></tr></table></figure><p>我们很快就可以定位到是一个动画状态机的问题，不过问题也接踵而至,BUG量有点多，然后一起看BUGLY的人也不少，客户端的其他人未必懂这些底层知识，那么其实就可以利用Bugly的符号表功能来做这件事情。</p><h2 id="How-to-do"><a href="#How-to-do" class="headerlink" title="How to do"></a>How to do</h2><p>首先去<a href="https://bugly.qq.com/v2/sdkDownload">Bugly官网</a>上下载最新的符号表导出工具</p><p>Android Unity的符号表路径在Editor\Data\PlaybackEngines\AndroidPlayer\Variations</p><p>搜索libunity.sym.so即可,注意MONO和IL2CPP要对应上传,输入导出和上传指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar buglySymbolAndroid.jar -i libunity.sym.so -u -<span class="hljs-built_in">id</span> <span class="hljs-variable">$yourappid</span> -key <span class="hljs-variable">$yourappkey</span> -package <span class="hljs-variable">$packagename</span> -version xx.xx.xx<br></code></pre></td></tr></table></figure><p>在BUGLY界面中打开界面，如果看到对应的符号表已上传就说明成功了</br><br><img src="/../images/symbol_success.png" alt="成功截图"></br><br>报错堆栈变成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">#<span class="hljs-number">00</span> pc <span class="hljs-number">00</span>a6ac38 libunity.so mecanim::statemachine::EvaluateState(mecanim::ValueArrayConstant <span class="hljs-type">const</span>&amp;, mecanim::statemachine::StateConstant <span class="hljs-type">const</span>&amp;, mecanim::statemachine::StateMachineInput <span class="hljs-type">const</span>&amp;, mecanim::statemachine::StateMachineOutput&amp;, mecanim::statemachine::StateMachineMemory&amp;, mecanim::statemachine::StateOutput&amp;, mecanim::statemachine::StateWorkspace&amp;, <span class="hljs-type">bool</span>, <span class="hljs-type">bool</span>) [x86]<br>#<span class="hljs-number">01</span> pc <span class="hljs-number">00</span>a6c128 libunity.so mecanim::statemachine::SetStateMachineInInitialState(mecanim::statemachine::StateMachineConstant <span class="hljs-type">const</span>&amp;, mecanim::statemachine::StateMachineInput <span class="hljs-type">const</span>&amp;, mecanim::statemachine::StateMachineOutput&amp;, mecanim::statemachine::StateMachineMemory&amp;, mecanim::statemachine::StateMachineWorkspace&amp;) [x86]<br>#<span class="hljs-number">02</span> pc <span class="hljs-number">003f</span>1bf6 libunity.so <span class="hljs-title function_">AnimatorControllerPlayable::GenerateGraph</span><span class="hljs-params">()</span> [x86]<br>#03 pc 003f0b4a libunity.so <span class="hljs-title function_">AnimatorControllerPlayable::SetAnimatorController</span><span class="hljs-params">(RuntimeAnimatorController*)</span> [x86]<br>#04 pc 0039ff68 libunity.so <span class="hljs-title function_">Animator::CreateInternalControllerPlayable</span><span class="hljs-params">()</span> [x86]<br>#05 pc 00396e77 libunity.so <span class="hljs-title function_">Animator::CreateObject</span><span class="hljs-params">()</span> [x86]<br>#06 pc 00398ce0 libunity.so <span class="hljs-title function_">Animator::Prepare</span><span class="hljs-params">()</span> [x86]<br></code></pre></td></tr></table></figure><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>将Addr2Line与IDA结合，定位报错汇编码</p>]]></content>
      
      
      <categories>
          
          <category> 汇编逆向 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>汇编调用指令，堆栈操作详解</title>
      <link href="/2019/09/27/base-asm-calls/"/>
      <url>/2019/09/27/base-asm-calls/</url>
      
        <content type="html"><![CDATA[<h2 id="一些常用的汇编指令直观翻译"><a href="#一些常用的汇编指令直观翻译" class="headerlink" title="一些常用的汇编指令直观翻译"></a>一些常用的汇编指令直观翻译</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span> , <span class="hljs-built_in">ebx</span>            <span class="hljs-comment">; eax = ebx</span><br><span class="hljs-keyword">lea</span> <span class="hljs-built_in">eax</span> , [<span class="hljs-built_in">ebx</span> + <span class="hljs-number">30</span>]     <span class="hljs-comment">; eax = ebx + 30 </span><br>                         <span class="hljs-comment">; 不这样写就是两条指令 mov eax, ebx ;add eax 30</span><br><span class="hljs-keyword">push</span> <span class="hljs-keyword">pop</span>                 <span class="hljs-comment">; 入栈，出栈</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">5</span>               <span class="hljs-comment">; eax += 5</span><br><span class="hljs-keyword">sub</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">5</span>               <span class="hljs-comment">; eax -= 5</span><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">eax</span>                  <span class="hljs-comment">; eax += 1</span><br><span class="hljs-keyword">mul</span>                      <span class="hljs-comment">; 乘法</span><br><span class="hljs-keyword">div</span>                      <span class="hljs-comment">; 除法</span><br></code></pre></td></tr></table></figure><h2 id="改变堆栈的操作"><a href="#改变堆栈的操作" class="headerlink" title="改变堆栈的操作"></a>改变堆栈的操作</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">push</span> <span class="hljs-built_in">eax</span>   // <span class="hljs-keyword">sub</span> <span class="hljs-built_in">esp</span> , <span class="hljs-number">4</span>  <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">esp</span>] , <span class="hljs-built_in">eax</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">eax</span>    // <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span> , [<span class="hljs-built_in">esp</span>]   <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span> , <span class="hljs-number">4</span><br><span class="hljs-keyword">call</span> <span class="hljs-number">1234</span>  // <span class="hljs-keyword">push</span> <span class="hljs-built_in">eip</span>   <span class="hljs-keyword">jmp</span> <span class="hljs-number">1234</span><br><span class="hljs-keyword">retn</span> <span class="hljs-number">8</span>     // <span class="hljs-keyword">pop</span> <span class="hljs-built_in">eip</span>   <span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span> , <span class="hljs-number">8</span>   常用于 __stdcall,这种函数自己清理自己的参数的<br><span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span> , xxx<br><span class="hljs-keyword">sub</span> <span class="hljs-built_in">esp</span> , xxx<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="栈指针、帧指针的学习"><a href="#栈指针、帧指针的学习" class="headerlink" title="栈指针、帧指针的学习"></a>栈指针、帧指针的学习</h2><p>ESP栈指针,每一次push或者pop值会跟这变，永远指向栈顶 </br><br>EBP帧指针，其实有无无所谓，如果没有使用ESP取局部变量和参数的时候因为地址会一直改变，人的理解上比较麻烦，于是在call指令save 的 EIP后记录下来当前的ESP到EBP中，这样子取参数或者局部变量的时候回更方便。</br></p><p>以下面这个在32位x86计算机上编译的函数为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">bar</span><span class="hljs-params">(<span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)</span>; <span class="hljs-comment">// a function to call</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">demo_stackframe</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, in c)</span>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">64</span>];<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-type">int</span> z;<br>    bar(z, y);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../images/only_esp.png" alt="&quot;&quot;"></p><p>调用bar函数的时候,如果没有设置 ebp传递参数汇编码如下:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; 假设为__cdecl,参数从右往左入栈，调用者清理堆栈</span><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">dword</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">4</span>]    <span class="hljs-comment">; push y</span><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">dword</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">4</span>]    <span class="hljs-comment">; push z</span><br><span class="hljs-keyword">call</span> bar              <span class="hljs-comment">; push eip,jmp bar</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span>            <span class="hljs-comment">; 清理堆栈</span><br></code></pre></td></tr></table></figure><p>我们可以发现，如果根据esp来寻找地址，很不直观，第一次我们将 y push到堆栈中后，导致esp sub 4,然后取z的时候地址就会跟着改变，显然这样理解上比较麻烦，同一个参数获取的时候esp的偏移量总是不一样。</p><p>为了更好的计算偏移量，我们需要一个固定不变的堆栈地址，这样就不会出现同一个参数然后偏移不一样的情况。于是引入了ebp(帧指针)的概念,在call bar之后将esp地址记录下来，此时的堆栈情况如下。</p><p><img src="/../images/use_ebp.png" alt="&quot;&quot;"><br>注意调用前要把caller的ebp保存起来，不然到调用完成后，caller的ebp就找不到了。所以调用bar函数前要写上“序言”代码</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">push</span> <span class="hljs-built_in">ebp</span>        <span class="hljs-comment">; 保存 caller的 ebp </span><br><span class="hljs-keyword">mov</span>  <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span>   <span class="hljs-comment">; 将bar函数的ebp设置为当前的esp</span><br><span class="hljs-keyword">sub</span>  <span class="hljs-built_in">esp</span>, <span class="hljs-number">76</span>    <span class="hljs-comment">; 提前扩容好局部变量</span><br></code></pre></td></tr></table></figure><p>注意这里仅仅保存了caller函数的ebp,如果想要保存caller函数的其他寄存器信息比如eax之类的，需要在序言这边push进去</p><p>现在调用bar函数的汇编指令差不多为：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">push</span> <span class="hljs-built_in">dword</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">72</span>]         <span class="hljs-comment">; push y</span><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">dword</span> [<span class="hljs-built_in">ebp</span>-<span class="hljs-number">76</span>]         <span class="hljs-comment">; push z</span><br><span class="hljs-keyword">call</span> bar<br><span class="hljs-keyword">add</span> <span class="hljs-built_in">esp</span>, <span class="hljs-number">8</span>                  <span class="hljs-comment">; 清栈</span><br></code></pre></td></tr></table></figure><p>使用了帧指针ebp后，所有的变量相对于ebp的偏移量都可以计算出来。许多时候，正偏移量用于访问函数参数，而负偏移量用于访问局部变量。使用ebp指针后，我们可以自由的更改esp指针而不用担心，其他变量的偏移地址</p><p>最后完成bar函数调用的时候：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">esp</span>,<span class="hljs-built_in">ebp</span>          <span class="hljs-comment">; 清理局部变量</span><br><span class="hljs-keyword">pop</span> <span class="hljs-built_in">ebp</span>              <span class="hljs-comment">; 恢复caller函数的ebp</span><br><span class="hljs-keyword">ret</span>                  <span class="hljs-comment">; pop eip</span><br></code></pre></td></tr></table></figure><p>由于 这种操作非常常见，因此x86体系提供了leave指令来缩短汇编指令长度</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">leave</span>                <span class="hljs-comment">; 相当于</span><br>                     <span class="hljs-comment">; mov esp,ebp</span><br>                     <span class="hljs-comment">; pop ebp</span><br><br><span class="hljs-keyword">ret</span>                  <span class="hljs-comment">; pop eip</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 汇编逆向 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
